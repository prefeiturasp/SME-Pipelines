pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'homolog' ? 'vaganacreche-hom' : 'sme-vaganacreche' }"
        SONAR_PROJECT = 'SME-VagasNaCreche-FrontEnd'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Tests') {
            when { anyOf { branch 'master_'; branch 'main'; branch "story/*"; branch 'develop'; branch 'development'; branch 'release_'; branch 'homolog_';  } }
            steps {
                nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: 'node-12-13') {
                    sh 'npm install'
                    sh 'npm install -g jshint'
                    sh 'jshint --verbose --reporter=checkstyle src > checkstyle-jshint.xml || exit 0'
                    checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: '**/checkstyle-jshint.xml', unHealthy: ''
                }
            }
        }

        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: 'node-12-13') {
                            sh 'npm install'
                            
                            sh"""
                                ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SONAR_PROJECT} \
                                    -Dsonar.branch.name=${branchname} \
                                    -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                    -Dsonar.typescript.tsconfigPath=tsconfig.json \
                                    -Dsonar.coverage.exclusions=Dockerfile*,**/testes/**,cypress.config.js,src/styles/**,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts \
                                    -Dsonar.exclusions=**/testes/**,cypress.config.js,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/** \
                                    -Dsonar.docker.file.patterns=Dockerfile.production \
                                    -Dsonar.sources=.
                            """
                        }
                    }
                }
            }
        }
        
        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'homolog';  } } 
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/vaganacreche-frontend"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"

                }
            }
        }
	    
        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'main'; branch 'homolog';  } }     
            steps {
                script{
                    if ( env.branchname == 'main' ||  env.branchname == 'master' || env.branchname == 'homolog' || env.branchname == 'release' ) {
                        sendTelegram("ðŸ¤© [Deploy ${env.branchname}] Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nMe aprove! \nLog: \n${env.BUILD_URL}")
                        timeout(time: 24, unit: "HOURS") {
                            input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: 'ollyver_ottoboni, kelwy_oliveira, anderson_morais, vinicius_ferreira'
                        }
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/vaganacreche-frontend -n ${namespace}
                            '''
                    }
                    else{
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/vaganacreche-frontend -n ${namespace}
                            '''
                        }
                    }
                }
            }           
        }    
    }

    post {
        success { sendTelegram("ðŸš€ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}console") }
        unstable { sendTelegram("ðŸ’£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}console") }
        failure { sendTelegram("ðŸ’¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}console") }
        aborted { sendTelegram ("ðŸ˜¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console") }
    }
}
def sendTelegram(message) {
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
                validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prd"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
}
