pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'testes' ? 'sme-ptrf-qa' : env.branchname == 'homolog' ? 'sme-ptrf-hom' : 'sme-ptrf' }"
        SONAR_PROJECT = 'SME-PTRF-FrontEnd'
    }

    agent { 
        kubernetes {
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }
    
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        timestamps ()
    }

    stages {
        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: 'node-22') {
                            if (!env.BRANCH_NAME.startsWith('PR-')) {
                                sh"""
                                    ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=${SONAR_PROJECT} \
                                        -Dsonar.branch.name=${branchname} \
                                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                        -Dsonar.coverage.exclusions=Dockerfile*,**/testes/**,cypress.config.js,src/styles/**,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                        -Dsonar.exclusions=**/testes/**,cypress.config.js,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                        -Dsonar.docker.file.patterns=Dockerfile \
                                        -Dsonar.sources=.
                                """
                            } else {
                                sh"""
                                    ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=${SONAR_PROJECT} \
                                        -Dsonar.pullrequest.branch=${env.CHANGE_BRANCH} \
                                        -Dsonar.pullrequest.base=${env.CHANGE_TARGET} \
                                        -Dsonar.pullrequest.key=${env.CHANGE_ID} \
                                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                        -Dsonar.coverage.exclusions=Dockerfile*,**/testes/**,cypress.config.js,src/styles/**,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                        -Dsonar.exclusions=**/testes/**,cypress.config.js,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                        -Dsonar.docker.file.patterns=Dockerfile \
                                        -Dsonar.sources=.
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage("Sonar Quality gate") {
            when {
                expression {
                    if (env.BRANCH_NAME.startsWith('PR-')) {
                        return ['testes', 'homolog', 'master'].contains(env.CHANGE_TARGET)
                    }
                }
            }
            steps {
                script {
                    timeout(15) {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'testes'; branch 'homolog'; } }
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/ptrf-frontend"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }
        
        stage('Deploy') {
            when { anyOf { branch 'master'; branch 'main'; branch 'testes'; branch 'homolog'; } }
            steps {
                script {
                    if ( env.branchname == 'main' ||  env.branchname == 'master' || env.branchname == 'homolog' ) {
                        withCredentials([string(credentialsId: 'aprovadores-ptrf', variable: 'aprovadores')]) {
                                timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        if( env.branchname == 'testes' ){
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/qa-frontend -n ${namespace}
                            '''
                        } else {
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/ptrf-frontend -n ${namespace}
                            '''      
                        }
                    }
                }
            }
        }
    }

    post {
        success { sendTelegram("ðŸš€ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}console") }
        unstable { sendTelegram("ðŸ’£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}console") }
        failure { sendTelegram("ðŸ’¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}console") }
        aborted { sendTelegram ("ðŸ˜¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console") }
    }
}

def sendTelegram(message) {
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
                validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("testes".equals(branchName)) { return "config_release"; }
}
