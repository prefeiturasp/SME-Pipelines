pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'development' ? 'limpeza-dev' : env.branchname == 'homolog' ? 'limpeza-hom' : env.branchname == 'homolog-r2' ? 'limpeza-hom2' : 'sme-limpeza' }"
        SONAR_PROJECT = 'SME-LIMPEZA-FRONTEND'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }
    
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        timestamps ()
    }
  
    stages {
        // stage('Tests') {
        //     steps {
        //         script {
        //             catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //                 nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: 'node-8') {
        //                     sh 'npm install'
        //                     sh 'npm test'
        //                     // sh 'yarn test:coverage'
        //                     // stash includes: "coverage/lcov.info", name: "coverage", allowEmpty: true
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        // unstash "coverage"
                        sh"""
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT} \
                                -Dsonar.branch.name=${branchname} \
                                -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                -Dsonar.typescript.tsconfigPath=tsconfig.json \
                                -Dsonar.coverage.exclusions=Dockerfile*,**/testes/**,cypress.config.js,src/styles/**,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                -Dsonar.exclusions=**/testes/**,cypress.config.js,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                -Dsonar.docker.file.patterns=Dockerfile.production \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }
        
        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            when { anyOf { branch 'main'; branch 'development'; branch 'homolog';  } } 
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/limpeza-frontend"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }
        
        stage('Deploy'){
            when { anyOf {  branch 'main'; branch 'development'; branch 'homolog'; } }        
            steps {
                script{                 
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/sme-limpeza-frontend  -n ${namespace}
                        '''
                   }
                }
            }           
        }     
    }
}

def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("homolog-r2".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }
    else if ("develop".equals(branchName)) { return "config_release"; }
}
