pipeline {
    environment {
      branchname =  env.BRANCH_NAME.toLowerCase()
      kubeconfig = getKubeconf(env.branchname)
      registryCredential = 'jenkins_registry'
      namespace = "${env.branchname == 'test' ? 'sme-sigla-qa' : env.branchname == 'homolog' ? 'sme-sigla-hom' : 'sme-sigla' }"
    }
    agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              } 


    options {
      buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }

    stages {

        stage('CheckOut') {
            steps { checkout scm }
        }


            /*stage('Testes Unitarios') {
              when { anyOf { branch 'master'; branch 'develop'; branch 'suporte'; branch 'homolog-r2_'; branch 'pre-release'; branch 'atualizarpython_'; branch 'homolog_' } }
              agent {
               kubernetes {
                   label 'python311'
                   defaultContainer 'python311'
                }
              }
              steps {
        	catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') { //Segue esteira mesmo com falha
                   checkout scm
                   sh 'pip install --user pipenv -r requirements/local.txt' //instalação das dependências
                   sh 'pip install pytest-xdist'
                   sh '''
                   export PATH=$PATH:/root/.local/bin
                   python manage.py collectstatic --noinput
		   coverage run -m pytest -n 4
                   coverage xml
                   '''
                }
              }              
            }*/

        /*stage('AnaliseCodigo') {
          when { anyOf { branch 'master'; branch 'develop'; branch 'suporte'; branch 'homolog-r2_'; branch 'pre-release'; branch 'atualizarpython' } }
          agent { kubernetes { 
                  label 'python311'
                  defaultContainer 'builder'
                }
              } 
          steps {
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') { //Segue esteira mesmo com falha
                withSonarQubeEnv('sonarqube-local'){
                  sh 'echo "[ INFO ] Iniciando analise Sonar..." && sonar-scanner \
                  -Dsonar.projectKey=SME-PTRF-BackEnd \
                  -Dsonar.python.coverage.reportPaths=*.xml'
              }
            }
           }
        }*/


        stage('Build') {
          when { anyOf { branch 'master'; branch 'test'; branch 'release'; branch 'homolog' } }
          steps {
            script {
              imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-alvo-ms-convocacao"
              dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
              docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
              dockerImage1.push()
              
              }
              sh "docker rmi $imagename1"
               }
          }
        }
         
        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'test'; branch 'release'; branch 'homolog' } }
            steps {
              script{
                if ( env.branchname == 'main' ||  env.branchname == 'master' || env.branchname == 'homolog' || env.branchname == 'release' ) {

                  withCredentials([string(credentialsId: 'aprovadores_sigla', variable: 'aprovadores')]) {
                    timeout(time: 24, unit: "HOURS") {
                      input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                    }
                  }
                }
                  withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                    if( env.branchname == 'test' ){
			                  sh('rm -f '+"$home"+'/.kube/config')
                        sh('cp $config '+"$home"+'/.kube/config')
                        sh "kubectl rollout restart deployment/sme-alvo-ms-convocacao -n ${namespace}"
			                  sh('rm -f '+"$home"+'/.kube/config')
                    } else {
			                  sh('rm -f '+"$home"+'/.kube/config')
                        sh('cp $config '+"$home"+'/.kube/config')
			                  sh "echo ${namespace}"
                        sh "kubectl rollout restart deployment/sme-alvo-ms-convocacao -n ${namespace}"
                        
					    }
                  }
                }
              }
            }


       
      }
      }

def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }   
    else if ("test".equals(branchName)) { return "config_release"; } 
    else if ("release".equals(branchName)) { return "config_release"; }      
       
      
    }
