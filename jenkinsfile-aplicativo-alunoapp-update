pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        SONAR_PROJECT = 'SME-Aplicativo-Aluno-APP'
    }

    agent { kubernetes { 
            label 'flutter-appaluno'
            defaultContainer 'flutter3165'
        }
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
        ansiColor('xterm')
        timestamps ()
    }

    stages {
        stage('CheckOut') {
            steps {
                checkout scm
            }
        }

       stage ('Build APK/AAB Dev') {
            when { anyOf { branch 'developer'; } }       
            steps {
                withCredentials([
                    file(credentialsId: 'google-service-dev', variable: 'GOOGLEJSONDEV'),
                    file(credentialsId: 'app-config-dev', variable: 'APPCONFIGDEV'),
                    file(credentialsId: 'app-key-jks', variable: 'APPKEYJKS'),
                    file(credentialsId: 'app-key-properties', variable: 'APPKEYPROPERTIES'),
                ]) {
                    sh 'if [ -d "config" ]; then rm -Rf config; fi'
                    sh 'cp ${APPKEYJKS} ~/key.jks && cp ${APPKEYJKS} ${WORKSPACE}/android/app/key.jks && cp ${APPKEYPROPERTIES} ${WORKSPACE}/android/key.properties'
                    sh 'mkdir config && cp $APPCONFIGDEV config/app_config.json'
                    sh 'cp $GOOGLEJSONDEV android/app/google-services.json'
                    sh 'flutter clean && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && flutter build apk --release && flutter build appbundle --release'
                    stash includes: 'build/app/outputs/flutter-apk/**/*.apk', name: 'appbuild'
                }
            }
        }

        stage ('Build APK/AAB Hom') {
            when { anyOf { branch 'release'; } }      
            steps {
                withCredentials([
                    file(credentialsId: 'google-service-hom', variable: 'GOOGLEJSONHOM'),
                    file(credentialsId: 'app-config-hom', variable: 'APPCONFIGHOM'),
                    file(credentialsId: 'app-key-jks', variable: 'APPKEYJKS'),
                    file(credentialsId: 'app-key-properties', variable: 'APPKEYPROPERTIES'),
                ]) {
                    sh 'if [ -d "config" ]; then rm -Rf config; fi'
                    sh 'cp ${APPKEYJKS} ~/key.jks && cp ${APPKEYJKS} ${WORKSPACE}/android/app/key.jks && cp ${APPKEYPROPERTIES} ${WORKSPACE}/android/key.properties'
                    sh 'mkdir config && cp $APPCONFIGHOM config/app_config.json'
                    sh 'cp $GOOGLEJSONHOM android/app/google-services.json'
                    sh 'flutter clean && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && flutter build apk --release && flutter build appbundle --release'
                    stash includes: 'build/app/outputs/flutter-apk/**/*.apk', name: 'appbuild'
                }
            }
        }

        stage('Build APK/AAB Prod') {
            when { anyOf { branch 'master'; } }  
            steps {
                withCredentials([
                    file(credentialsId: 'google-service-prod', variable: 'GOOGLEJSONPROD'),
                    file(credentialsId: 'app-config-prod', variable: 'APPCONFIGPROD'),
                    file(credentialsId: 'app-key-jks', variable: 'APPKEYJKS'),
                    file(credentialsId: 'app-key-properties', variable: 'APPKEYPROPERTIES'),
                ]) {
                    sh 'if [ -d "config" ]; then rm -Rf config; fi'
                    sh 'cp ${APPKEYJKS} ~/key.jks && cp ${APPKEYJKS} ${WORKSPACE}/android/app/key.jks && cp ${APPKEYPROPERTIES} ${WORKSPACE}/android/key.properties'
                    sh 'cd ${WORKSPACE} && mkdir config && cp $APPCONFIGPROD config/app_config.json'
                    sh 'cp ${GOOGLEJSONPROD} android/app/google-services.json'
                    sh 'flutter clean && flutter pub get && flutter packages pub run build_runner build --delete-conflicting-outputs && flutter build apk --release && flutter build appbundle --release'
                    //sh "/opt/android-sdk-linux/build-tools/33.0.2/apksigner sign --ks ~/key.jks --ks-pass file:${WORKSPACE}/android/key.pass ${WORKSPACE}/build/app/outputs/apk/release/app-release.apk"
                    stash includes: 'build/app/outputs/flutter-apk/**/*.apk', name: 'appbuild'
                }
            }
        }

        stage('SonarQube') {
            agent { kubernetes { 
                    label 'builder-debian'
                    defaultContainer 'builder-debian'
                }
            }
            steps {
                checkout scm
                unstash 'appbuild'
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        sh"""
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT} \
                                -Dsonar.branch.name=${branchname} \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.exclusions=**/testes/**,cypress.config.js \
                                -Dsonar.coverage.exclusions=Dockerfile,**/testes/**,cypress.config.js \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }
    }
    post {
        always {
            echo 'One way or another, I have finished'
            archiveArtifacts artifacts: 'build/app/outputs/apk/release/**/*.apk', fingerprint: true
            archiveArtifacts artifacts: 'build/app/outputs/bundle/release/**/*.aab', fingerprint: true
        }
    }
}
