pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'development' ? 'novosgp-dev' : env.branchname == 'testes' ? 'novosgp-testes' : env.branchname == 'release' ? 'novosgp-hom' : 'sme-novosgp' }"
        SONAR_PROJECT = 'NOVOSGP-DEVOPS'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Sonar & Tests') {
            steps {
                script {
                    def scannerHome = tool 'sonar-dotnet-5';
                    withDotNet(sdk: 'dotnet-5') {
                        withSonarQubeEnv('sonarqube-sme'){
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"${SONAR_PROJECT}" \
                                    /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.coverage.exclusions="**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.exclusions="**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            
                            dotnetBuild project: 'SME.SGP.sln'
                            
                            def testsDir = [
                                'teste/SME.SGP.TesteIntegracao',
                                'teste/SME.SGP.TesteIntegracao.AEE',
                                'teste/SME.SGP.TesteIntegracao.Aula',
                                'teste/SME.SGP.TesteIntegracao.Fechamento',
                                'teste/SME.SGP.TesteIntegracao.Frequencia',
                                'teste/SME.SGP.TesteIntegracao.Pendencia',
                                'teste/SME.SGP.Aplicacao.Teste',
                                'SME.SGP.Api.Teste'
                            ]

                            def tasks = [:]

                            for (t in testsDir) {
                                def testName = t
                                tasks[testName] = {
                                    stage("Test: ${testName}") {
                                        dotnetTest(
                                            project: "${testName}",
                                            properties: [
                                                CollectCoverage: 'true',
                                                CoverletOutputFormat: 'opencover'
                                            ],
                                            collect: 'XPlat Code Coverage',
                                            noBuild: true,
                                            continueOnError: true
                                        )
                                    }
                                }
                            }

                            parallel tasks
                            
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }       
    }

//   post {
//     success { sendTelegram("ðŸš€ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}console") }
//     unstable { sendTelegram("ðŸ’£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}console") }
//     failure { sendTelegram("ðŸ’¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}console") }
//     aborted { sendTelegram ("ðŸ˜¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console") }
//   }
}
// def sendTelegram(message) {
//     def encodedMessage = URLEncoder.encode(message, "UTF-8")
//     withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
//     string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
//         response = httpRequest (consoleLogResponseBody: true,
//                 contentType: 'APPLICATION_JSON',
//                 httpMode: 'GET',
//                 url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
//                 validResponseCodes: '200')
//         return response
//     }
// }
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("testes".equals(branchName)) { return "config_release"; }
    else if ("develop".equals(branchName)) { return "config_release"; }
}
