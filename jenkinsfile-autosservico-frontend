pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'test' ? 'autosservico-frontend-testes' : env.branchname == 'homolog' ? 'autosservico-frontend-hom' : env.branchname == 'master' ? 'autosservico-frontend' : 'autosservico-frontend' }"
        deployment = "sme-autosservico-frontend"
    }
    
    agent { kubernetes { 
            label 'builder'
            defaultContainer 'builder'
        }
    }
    
    options {
      buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }

    stages {
        stage('CheckOut') {            
            steps { checkout scm }       
        }
        
        stage('Build') {
          when { anyOf { branch 'master'; branch 'homolog';  } }
            steps { 
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/${env.deployment}"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile.production .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }

        // stage('Deploy'){
        //     when { anyOf { branch 'master'; branch 'homolog'; branch 'test';  } }
        //     agent { kubernetes { 
        //             label 'builder'
        //             defaultContainer 'builder'
        //         }
        //     }        
        //     steps {
        //         script{
        //             if ( env.branchname == 'master' || env.branchname == 'homolog' ) {
        //                 timeout(time: 24, unit: "HOURS") {
        //                     input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: 'ollyver_ottoboni'
        //                 }
        //                 withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
        //                     sh('cp $config '+"$home"+'/.kube/config')
        //                     sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
        //                     sh('rm -f '+"$home"+'/.kube/config')
        //                 }
        //             }
        //             else{
        //                 withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
        //                     sh('cp $config '+"$home"+'/.kube/config')
        //                     sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
        //                     sh('rm -f '+"$home"+'/.kube/config')
        //                 }
        //             }
        //         }
        //     }           
        // }
    }
}

def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("test".equals(branchName)) { return "config_release"; }
}