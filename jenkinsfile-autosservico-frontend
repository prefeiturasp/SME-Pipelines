pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'test' ? 'autosservico-testes' : env.branchname == 'homolog' ? 'autosservico-hom' : env.branchname == 'master' ? 'autosservico' : 'autosservico' }"
        deployment = "sme-autosservico-frontend"
    }
    
    agent { kubernetes { 
            label 'builder'
            defaultContainer 'builder'
        }
    }
    
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    stages {
        stage('CheckOut') {            
            steps { checkout scm }       
        }
        
        stage('Tests') {
            agent { kubernetes { 
                    label 'node-alpine-22'
                    defaultContainer 'node-alpine-22'
                }
            } 
            steps {
                checkout scm

                sh '''
                    set +x
                    info() {
                        echo "\033[1;33m[Info]    \033[0m $1"
                    }
                    info "EXECUTANDO TESTES"

                    yarn
                    yarn test --coverage

                    tar -czf bintestes.tar.gz ./coverage || true
                    set -x
                '''

                stash includes: "bintestes.tar.gz" , name: "bintestes"
            }
        }
        
        stage('SonarQube') {
            agent { kubernetes { 
                    label 'devops-tools'
                    defaultContainer 'sonarscanner'
                }
            }
            steps {
                withSonarQubeEnv('sonarqube-local'){
                    unstash 'bintestes'
                    sh'''
                        set +x
                        info() {
                            echo "\033[1;33m[Info]    \033[0m $1"
                        }
                        info "INICIANDO ANALISE COM SONARQUBE"
                        tar -xzf bintestes.tar.gz
                        ls -la ./coverage/

                        sonar-scanner \
                            -Dsonar.projectKey=SME-Autosservico-Frontend \
                            -Dsonar.branch.name=${branchname} \
                            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info \
                            -Dsonar.sources=.
                        
                        set -x
                    '''
                }
            }
        }

        stage('SonarQube Quality gate') {
            steps {
                script {
                    sh'''
                        set +x
                        info() {
                            echo "\033[1;33m[Info]    \033[0m $1"
                        }
                        info "VERIFICANDO QUALITY GATE"
                        set -x
                    '''
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build') {
          when { anyOf { branch 'master'; branch 'homolog';  } }
            steps { 
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/${env.deployment}"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile.production .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }

        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'homolog'; branch 'test';  } }
            agent { kubernetes { 
                    label 'builder'
                    defaultContainer 'builder'
                }
            }        
            steps {
                script{
                    if ( env.branchname == 'master' || env.branchname == 'homolog' ) {
                        timeout(time: 24, unit: "HOURS") {
                            input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: 'ollyver_ottoboni'
                        }
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('rm -f '+"$home"+'/.kube/config')
                        }
                    }
                    else{
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('rm -f '+"$home"+'/.kube/config')
                        }
                    }
                }
            }           
        }
    }
}

def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("test".equals(branchName)) { return "config_release"; }
}