pipeline {
    environment {
      branchname =  env.BRANCH_NAME.toLowerCase()
      kubeconfig = getKubeconf(env.branchname)
      registryCredential = 'jenkins_registry'
      namespace = "${env.branchname == 'development' ? 'serap-estud-dev' : env.branchname == 'release' ? 'serap-estud-hom' : env.branchname == 'release-r2' ? 'serap-estud-hom2' : 'sme-serap-estudante' }"
      deployment = "${env.branchname == 'development' ? 'prova-serap-front' : env.branchname == 'release' ? 'prova-serap-front' : env.branchname == 'release-r2' ? 'prova-serap-front' : 'sme-prova-serap-front' }"
    }
  
    agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }

    options {
      buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }
  
    stages {

        stage('CheckOut') {            
            steps { checkout scm }            
        }

      stage('Build Dev') {
        when { 
          anyOf { 
            branch 'development'; 
          } 
        }

        steps {
          withCredentials([ file(credentialsId: 'serap-app-environment-dev', variable: 'ENVDEV')]) {
            script {
	            sh 'if [ -f "envdev" ]; then rm -f envdev; fi'
              sh 'cp ${ENVDEV} envdev'
              sh "sed 's/^export //' envdev > .env"
	            sh 'if [ -f "envdev" ]; then rm -f envdev; fi'
              imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-prova-serap-front"
              dockerImage1 = docker.build(imagename1, "-f Dockerfile.flutter .")
              docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                dockerImage1.push()
              }
              sh "docker rmi $imagename1"
            }

          }
        }
      }

      stage('Build Hom') {
        when { 
          anyOf { 
            branch 'release'; 
          } 
        }

        steps {
          withCredentials([ file(credentialsId: 'serap-app-environment-hom', variable: 'ENVHOM')]) {
            script {
	            sh 'if [ -f "envhom" ]; then rm -f envhom; fi'
              sh 'cp ${ENVHOM} envhom'
              sh "sed 's/^export //' envhom > .env"
	            sh 'if [ -f "envhom" ]; then rm -f envhom; fi'
              imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-prova-serap-front"
              dockerImage1 = docker.build(imagename1, "-f Dockerfile.flutter .")
              docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                dockerImage1.push()
              }
              sh "docker rmi $imagename1"
            }

          }
        }
      }

      stage('Build Prod') {
        when { 
          anyOf { 
            branch 'master'; 
          } 
        }

        steps {
          withCredentials([ file(credentialsId: 'serap-app-environment-prod', variable: 'ENVPROD')]) {
            script {
              sh 'if [ -f "envprod" ]; then rm -f envprod; fi'
              sh 'cp ${ENVPROD} envprod'
              sh "sed 's/^export //' envprod > .env"
              sh 'if [ -f "envprod" ]; then rm -f envprod; fi'
              imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-prova-serap-front"
              dockerImage1 = docker.build(imagename1, "-f Dockerfile.flutter .")
              docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                dockerImage1.push()
              }
              sh "docker rmi $imagename1"
            }

          }
        }
      }

	    
        stage('Deploy'){
            when { anyOf {  branch 'master'; branch 'main'; branch 'development'; branch 'release'; branch 'homolog';  } }        
            steps {
                script{
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('if [ -f '+"$home"+'/.kube/config ];then rm -f '+"$home"+'/.kube/config; fi')
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('if [ -f '+"$home"+'/.kube/config ];then rm -f '+"$home"+'/.kube/config; fi')
                    }
                }
            }           
        }    
    }

  post {
    always { sh('if [ -f '+"$home"+'/.kube/config ];then rm -f '+"$home"+'/.kube/config; fi')}
  }
}

def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prd"; }
    else if ("master".equals(branchName)) { return "config_prd"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }  
}
