pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'preprod' ? 'acessos-preprod' : env.branchname == 'release' ? 'acessos-hom' : 'acessos-prd' }"
        SONAR_PROJECT = 'SME-Acessos'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Tests') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        withDotNet(sdk: 'dotnet-6') {
                            dotnetTest(
                                project: 'SME.Acessos.TesteIntegracao',
                                properties: [
                                        CollectCoverage: 'true',
                                        CoverletOutputFormat: 'opencover'
                                ],
                                collect: 'Code Coverage',
                                noBuild: false,
                                continueOnError: false
                            )
                        }
                        stash includes: "SME.Acessos.TesteIntegracao/coverage.opencover.xml", name: "coverage", allowEmpty: true
                    }
                }
            }
        }

        stage('SonarQube') {
            steps { 
                script{
                    def scannerHome = tool 'sonar-dotnet-6';
                    withDotNet(sdk: 'dotnet-6') {
                        try {
                            unstash "coverage"
                        } catch (e) {
                            echo "Nenhum coverage encontrado"
                        }
                        
                        withSonarQubeEnv('sonarqube-sme'){
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"${SONAR_PROJECT}" \
                                    /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.coverage.exclusions="**/teste/**,**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.exclusions="teste/**,**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            dotnetBuild project: 'SME.Acessos.Api/SME.Acessos.Api.csproj'
                            
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }

        stage('Build') {
            when { anyOf { branch 'master'; branch 'preprod'; branch 'main'; branch 'release'; branch 'homolog'; } } 
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-acessos"
                    dockerImage1 = docker.build(imagename1, "-f SME.Acessos.Api/Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }
        
        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'preprod'; branch 'main'; branch 'release'; branch 'homolog'; } }
            steps {
                script{
                    if ( env.branchname == 'main' ||  env.branchname == 'master_' ) {
                        withCredentials([string(credentialsId: 'aprovadores-acessos', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/sme-acessos -n ${namespace}
                        '''
                    }
                }
            }           
        }

        stage('Flyway') {
            agent { kubernetes { 
                    label 'flyway'
                    defaultContainer 'flyway'
                }
            }
            when { anyOf { branch 'master'; branch 'preprod'; branch 'main'; branch 'release'; branch 'homolog'; } }
            steps{
                withCredentials([string(credentialsId: "flyway_acessos_${branchname}", variable: 'url')]) {
                    sh 'pwd'
                    sh 'ls $(pwd)/scripts'
                    sh 'flyway -X -url=$url -locations="filesystem:scripts" -outOfOrder=true migrate'
                }
            }      
        }
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("preprod".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
}
