pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'development' ? 'cdep-dev' : env.branchname == 'release' ? 'cdep-hom' : 'sme-cdep' }"
        SONAR_PROJECT = 'SME-CDEP-BACKEND'
    }
      
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Tests') {
            parallel {
                stage('Test: SME.CDEP.TesteIntegracao') {
                    agent { kubernetes { label 'builder-debian'; defaultContainer 'builder-debian' } }
                    when { anyOf { branch 'master'; branch 'main'; branch 'release'; } } 
                    steps {
                        script {
                            withDotNet(sdk: 'dotnet-6') {
                                retry(3) {
                                    dotnetTest(
                                        project: 'SME.CDEP.TesteIntegracao',
                                        properties: [
                                                CollectCoverage: 'true',
                                                CoverletOutputFormat: 'opencover'
                                        ],
                                        collect: 'Code Coverage',
                                        noBuild: false,
                                        continueOnError: false
                                    )
                                }
                            }
                            stash includes: "SME.CDEP.TesteIntegracao/coverage.opencover.xml", name: "coverage-TesteIntegracao", allowEmpty: true
                        }
                    }
                }
                stage('Test: SME.CDEP.TesteUnitario') {
                    agent { kubernetes { label 'builder-debian'; defaultContainer 'builder-debian' } }
                    when { anyOf { branch 'master'; branch 'main'; branch 'release'; } } 
                    steps {
                        script {
                            withDotNet(sdk: 'dotnet-8') {
                                retry(3) {
                                    dotnetTest(
                                        project: 'SME.CDEP.TesteUnitario',
                                        properties: [
                                                CollectCoverage: 'true',
                                                CoverletOutputFormat: 'opencover'
                                        ],
                                        collect: 'Code Coverage',
                                        noBuild: false,
                                        continueOnError: false
                                    )
                                }
                            }
                            stash includes: "SME.CDEP.TesteUnitario/coverage.opencover.xml", name: "coverage-TesteUnitario", allowEmpty: true
                        }
                    }
                }
            }
        }

        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonar-dotnet-6';
                    withDotNet(sdk: 'dotnet-6') {
                        withSonarQubeEnv('sonarqube-sme'){                           
                            for (t in [
                                'TesteIntegracao',
                                'TesteUnitario'
                            ]) {
                                try {
                                    unstash "coverage-${t}"
                                } catch (e) {
                                    echo "Nenhum coverage encontrado para ${t}"
                                }
                            }
                            
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"${SONAR_PROJECT}" \
                                    /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.coverage.exclusions="**/teste/**,**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.exclusions="teste/**,**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            
                            dotnetBuild project: 'SME.CDEP.Webapi/SME.CDEP.Webapi.csproj'
                            
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; } } 
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-cdep-api"
                    dockerImage1 = docker.build(imagename1, "-f SME.CDEP.Webapi/Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }
	    
        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; } }       
            steps {
                script{
                    if ( env.branchname == 'main' ||  env.branchname == 'master' ) {
                        withCredentials([string(credentialsId: 'aprovadores-sgp', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    else {
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/sme-cdep-api -n ${namespace}
                            '''
                        }
                    }
                }
            }           
        }

        stage('Flyway') {
            agent { kubernetes { 
                    label 'flyway'
                    defaultContainer 'flyway'
                }
            }
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; } }
            steps{
                withCredentials([string(credentialsId: "flyway_cdep_${branchname}", variable: 'url')]) {
                    sh 'flyway -url=$url -locations="filesystem:scripts" -outOfOrder=true migrate'
                }
            }       
        }
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }
}
