pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'release' ? 'sondagem-hom' : env.branchname == 'dev' ? 'sondagem-dev' : 'sme-pedagogico-gestao'}"
        SONAR_PROJECT = 'SME-Pedagogico-Gestao'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('SonarQube') {
            when { anyOf {  branch 'master'; branch 'main'; branch 'release'; branch 'testes'; } }
            steps {
                script {
                    def scannerHome = tool 'sonar-dotnet-2';
                    withDotNet(sdk: 'dotnet-2') {
                        withSonarQubeEnv('sonarqube-sme'){                           
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"${SONAR_PROJECT}" \
                                    /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.coverage.exclusions="**/teste/**,**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.exclusions="teste/**,**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            
                            dotnetBuild project: 'SME-Pedagogico-Gestao.sln'
                            
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }

        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; } }
            steps {
                script {
                    imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-sondagem-backend"        
                    dockerImage = docker.build(imagename, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage.push()
                    }
                    sh "docker rmi $imagename"
                }
            }
        }
	    
        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; } }
            steps {
                script{
                    if ( env.branchname == 'main' ||  env.branchname == 'master' || env.branchname == 'homolog' || env.branchname == 'release' ) {
                        sendTelegram("ðŸ¤© [Deploy ${env.branchname}] Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nMe aprove! \nLog: \n${env.BUILD_URL}")
                         withCredentials([string(credentialsId: 'aprovadores-sgp', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl -n ${namespace} rollout restart deploy
                        '''
                    }
                }
            }           
        }

        stage('Flyway') {
            agent { kubernetes { 
                    label 'flyway'
                    defaultContainer 'flyway'
                }
            }
            steps{
                withCredentials([string(credentialsId: "flyway_pedagogicogestao_${branchname}", variable: 'url')]) {
                    sh 'flyway -url=$url -locations="filesystem:scripts" -outOfOrder=true migrate'
                }
            }		
        }    

    }

    post {
        success { sendTelegram("ðŸš€ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}console") }
        unstable { sendTelegram("ðŸ’£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}console") }
        failure { sendTelegram("ðŸ’¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}console") }
        aborted { sendTelegram ("ðŸ˜¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console") }
    }
}
def sendTelegram(message) {
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
                validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("release".equals(branchName)) { return "config_release"; }
}
