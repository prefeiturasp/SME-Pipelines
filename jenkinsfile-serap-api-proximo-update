pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'test' ? 'serap-estud-testes' : env.branchname == 'homolog' ? 'serap-estud-hom' : 'serap-estudante' }"
        deployment = "sme-serap-api-proximo"
        SONAR_PROJECT = 'SME-Proximo-API'
    }
    
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }
    
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        timestamps ()
    }

    stages {
        stage('Tests') {
            agent { kubernetes { 
                    label 'python312'
                    defaultContainer 'python312'
                }
            }
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        sh'''
                            pip install --upgrade pip
                            pip install --no-cache-dir -r requirements.txt
                            pip install coverage

                            coverage run -m pytest
                            coverage xml
                        '''
                        stash name: 'coverage', includes: 'coverage.xml'
                    }
                }
            }
        }

        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        unstash 'coverage'
                        sh"""
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT} \
                                -Dsonar.branch.name=${branchname} \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.exclusions=**/testes/**,cypress.config.js \
                                -Dsonar.coverage.exclusions=Dockerfile,**/testes/**,cypress.config.js \
                                -Dsonar.docker.file.patterns=Dockerfile \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
          when { anyOf { branch 'master'; branch 'homolog'; branch 'test';  } }
            steps { 
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/${env.deployment}"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }

        stage('Deploy') {
            when { anyOf { branch 'master'; branch 'homolog'; branch 'test'; } }
            steps {
                script {
                    if (env.branchname == 'master' || env.branchname == 'homolog') {
                        timeout(time: 24, unit: "HOURS") {
                            input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: 'ollyver_ottoboni'
                        }
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]) {
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/${deployment} -n ${namespace}
                            '''
                        }
                    } else {
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]) {
                            sh '''
                                [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                                mkdir -p "$HOME/.kube"
                                cp "$config" "$HOME/.kube/config"
                                export KUBECONFIG="$HOME/.kube/config"

                                kubectl rollout restart deployment/${deployment} -n ${namespace}
                            '''
                        }
                    }
                }
            }
        }

    }
}

def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("test".equals(branchName)) { return "config_release"; }
}