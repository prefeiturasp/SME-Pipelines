pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        registryCredential = 'jenkins_registry'
        SONAR_PROJECT = 'SME-INTRANET'
        project = 'WORDPRESS-INTRANET'.toLowerCase()
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        sh"""
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT} \
                                -Dsonar.branch.name=${branchname} \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.exclusions=**/testes/**,cypress.config.js \
                                -Dsonar.coverage.exclusions=Dockerfile,**/testes/**,cypress.config.js \
                                -Dsonar.docker.file.patterns=Dockerfile \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            when { anyOf { branch 'main'; branch 'homolog'; branch 'php-fpm-hom'; branch 'php-fpm-prod'; } } 
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/wordpress/${env.branchname}/intranet"
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        sh('docker pull registry.sme.prefeitura.sp.gov.br/wordpress/base:7.4-fpm-apache')
                        dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                        dockerImage1.push()
                    }
                }
            }
        }

        stage('Trivy Scan') {
            agent { kubernetes { 
                    label 'trivy'
                    defaultContainer 'trivy'
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        echo "Scan filesystem"
                        sh 'trivy fs . --output vulnerabilities.json --skip-version-check --format json'
                        sh 'trivy scan2html generate --scan2html-flags --with-epss --output ${project}_fs_${branchname}.html --from vulnerabilities.json'

                        echo "Scan imagem"
                        docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                            try {
                                sh "docker pull registry.sme.prefeitura.sp.gov.br/wordpress/${branchname}/intranet:latest"
                                sh "trivy image registry.sme.prefeitura.sp.gov.br/wordpress/${branchname}/intranet:latest --skip-version-check --output intranet.json --format json"
                                sh "trivy scan2html generate --scan2html-flags --with-epss --output intranet_image_${branchname}.html --from intranet.json"
                                sh "docker rmi registry.sme.prefeitura.sp.gov.br/wordpress/${branchname}/intranet:latest"
                            } catch (e) {
                                echo "⚠️ Scan falhou!"
                            }
                        }

                        if (currentBuild.currentResult == 'SUCCESS') {
                            archiveArtifacts artifacts: '*.html', onlyIfSuccessful: true
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: false,
                                reportDir: '',
                                reportFiles: '*_${branchname}.html',
                                reportName: 'Trivy Reports',
                                reportTitles: '',
                                useWrapperFileDirectly: true
                            ])
                        } else {
                            echo "⚠️ Trivy Scan falhou, report não será publicado."
                        }
                    }
                }
            }
        }
        
        stage('Deploy Prod'){
            when { anyOf {  branch 'main'; branch 'php-fpm-prod'; } }        
            steps {
                script{
                    if ( env.branchname == 'main' ) {
                        withCredentials([string(credentialsId: 'aprovadores-wordpress', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }                    
                    withCredentials([file(credentialsId: 'config_wordpress', variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/prod-intranet -n prod-intranet
                        '''
                   }
                }
            }           
        }

        stage('Deploy Hom'){
            when { anyOf {  branch 'homolog'; branch 'php-fpm-hom'; } }        
            steps {
                script{                 
                    withCredentials([file(credentialsId: 'config_wordpress', variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/hom-intranet -n hom-intranet
                        '''
                   }
                }
            }           
        }     
    }
}
