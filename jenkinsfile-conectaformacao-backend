pipeline {
    environment {
      branchname =  env.BRANCH_NAME.toLowerCase()
      kubeconfig = getKubeconf(env.branchname)
      registryCredential = 'jenkins_registry'
      namespace = "${env.branchname == 'development' ? 'conectaformacao-dev' : env.branchname == 'release' ? 'conectaformacao-hom' : env.branchname == 'release-r2' ? 'conectaformacao-hom2' : env.branchname == 'preprod' ? 'conectaformacao-preprod' : 'conectaformacao-prd' }"
    }
  
    agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }

    options {
      buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }
  
    stages {

        stage('CheckOut') {            
            steps { checkout scm }            
        }

        stage('Build') {
          when { anyOf { branch 'master'; branch 'main'; branch "story/*"; branch 'development'; branch 'develop'; branch 'release'; branch 'homolog'; branch 'homolog-r2'; branch 'preprod';  } } 
          steps {
            script {
              imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/conectaformacao-api"
              dockerImage1 = docker.build(imagename1, "-f SME.ConectaFormacao.Webapi/Dockerfile .")
              docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
              dockerImage1.push()
              }
              sh "docker rmi $imagename1"
            }
          }
        }

        stage('Sonar & Testes') {
         when { anyOf { branch 'master_'; branch 'main_'; branch 'development_'; branch 'release'; branch 'preprod_'; } }
          parallel {
          stage('TesteIntegracao & build'){
            agent { kubernetes {
               label 'dotnet6-sonar'
               defaultContainer 'dotnet6-sonar'
              }
            }
            steps{
              checkout scm
              script{
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-ConectaFormacao" /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml"'
                    sh 'dotnet build SME-ConectaFormacao.sln'
                    //sh "dotnet restore SME-ConectaFormacao.sln"
                    sh 'dotnet test SME.ConectaFormacao.TesteIntegracao --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }

        stage('TesteIntegracao'){
            agent { kubernetes {
               label 'dotnet6-sonar'
               defaultContainer 'dotnet6-sonar'
              }
            }
            steps{
              checkout scm  
              script{
                  sh "ls -ltra"
                  sh "pwd"
                  sh "hostname"
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-ConectaFormacao" /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml"'
                    sh 'dotnet build SME-ConectaFormacao.sln'
                    //sh "dotnet restore SME-ConectaFormacao.sln"
                    sh 'dotnet test SME.ConectaFormacao.TesteIntegracao --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }
          }  
             }

	    
        stage('Deploy'){
            when { anyOf {  branch 'master'; branch 'main'; branch 'development'; branch 'release'; branch 'release-r2'; branch 'preprod'; } }        
            steps {
                script{
                        if ( env.branchname == 'main' ||  env.branchname == 'master' ) {
                            withCredentials([string(credentialsId: 'aprovadores-sgp', variable: 'aprovadores')]) {
                                timeout(time: 24, unit: "HOURS") {
                                    input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                                }
                            }
                        }
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                                sh('if [ -f '+"$home"+'/.kube/config ];then rm -f '+"$home"+'/.kube/config; fi')
                                sh('cp $config '+"$home"+'/.kube/config')
                                sh "kubectl rollout restart deployment/conectaformacao-api -n ${namespace}"
                                sh('rm -f '+"$home"+'/.kube/config')
                        }
                }
            }           
        }

      stage('Flyway') {
         agent { kubernetes { 
                  label 'flyway'
                  defaultContainer 'flyway'
                }
              }
        when { anyOf {  branch 'master'; branch 'main'; branch 'development'; branch 'release'; branch 'release-r2'; branch 'preprod'; } }
        steps{
          withCredentials([string(credentialsId: "flyway_conectaformacao_${branchname}", variable: 'url')]) {
            checkout scm
            sh 'pwd'
            sh 'ls'
            sh 'flyway -url=$url -locations="filesystem:scripts" -outOfOrder=true migrate'
          }
        }       
      }
        stage('Build-Worker-Notif') {
            when { anyOf { branch 'master_'; branch 'main'; branch 'development'; branch 'release'; branch 'preprod';  } }
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/worker-conecta-notif"
                    dockerImage1 = docker.build(imagename1, "-f SME.Conecta.Notificacao.Worker/Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                }
            }
        }
        stage('Deploy-Worker-Notif') {
            when { anyOf { branch 'master_'; branch 'main'; branch 'development'; branch 'release'; branch 'preprod';  } }
            steps {
                script {
                    if ( env.branchname == 'main' ||  env.branchname == 'master' ) {
                        withCredentials([string(credentialsId: 'aprovadores-sgp', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh('rm -f '+"$home"+'/.kube/config')
                        sh('cp $config '+"$home"+'/.kube/config')
                        sh "kubectl rollout restart deployment/worker-conecta-notif -n ${namespace}"
                        sh('rm -f '+"$home"+'/.kube/config')
                    }   
                }
            }
        }
    }
post {
    always { sh('if [ -f '+"$home"+'/.kube/config ];then rm -f '+"$home"+'/.kube/config; fi')}
  }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("homolog-r2".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }
    else if ("develop".equals(branchName)) { return "config_release"; }
    else if ("preprod".equals(branchName)) { return "config_prod"; }
}
