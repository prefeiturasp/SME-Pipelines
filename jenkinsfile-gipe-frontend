pipeline {
    environment {
      branchname =  env.BRANCH_NAME.toLowerCase()
      kubeconfig = getKubeconf(env.branchname)
      registryCredential = 'jenkins_registry'
      namespace = "${env.branchname == 'test' ? 'sme-gipe-test' : env.branchname == 'homolog' ? 'sme-gipe-hom' : 'sme-gipe' }"
    }

   agent { kubernetes { 
                  label 'builder'
                  defaultContainer 'builder'
                }
              }

    options {
      buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }

    stages {

        stage('CheckOut') {
            steps { checkout scm }
        }



        stage('Build') {
          when { anyOf { branch 'master'; branch 'main'; branch "story/*"; branch 'test'; branch 'release'; branch 'homolog';  } }
          steps {
            script {
              imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-gipe-frontend"
              dockerImage1 = docker.build(imagename1, "-f Dockerfile.production .")
              docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
              dockerImage1.push()
              }
              sh "docker rmi $imagename1"
              
            }
          }
        }
        stage('Deploy'){
            when { anyOf {  branch 'master'; branch 'main'; branch 'test'; branch 'release'; branch 'homolog'; } }
            steps {
              script{
                if ( env.branchname == 'main' ||  env.branchname == 'master' || env.branchname == 'homolog_' || env.branchname == 'release' ) {

                  withCredentials([string(credentialsId: 'aprovadores-gipe', variable: 'aprovadores')]) {
                    timeout(time: 24, unit: "HOURS") {
                      input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                    }
                  }
                }
                  withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                    if( env.branchname == 'testes' ){
			                  sh('rm -f '+"$home"+'/.kube/config')
                        sh('cp $config '+"$home"+'/.kube/config')
                        sh "kubectl rollout restart deployment/qa-frontend -n ${namespace}"
			                  sh('rm -f '+"$home"+'/.kube/config')
                    } else {
			                  sh('rm -f '+"$home"+'/.kube/config')
                        sh('cp $config '+"$home"+'/.kube/config')
			                  sh "echo ${namespace}"
                        sh "kubectl rollout restart deployment/sme-gipe-frontend -n ${namespace}"
                                      sh('if [ -f '+"$home"+'/.kube/config ]; then rm -f '+"$home"+'/.kube/config; fi')
                                           
					    }
                  }
                }
              }
            }

    }

  }
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("homolog-r2".equals(branchName)) { return "config_release"; }
    else if ("testes".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }
    else if ("test".equals(branchName)) { return "config_release"; }
}
