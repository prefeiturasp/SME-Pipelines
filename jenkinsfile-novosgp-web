pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'development' ? 'novosgp-dev' : env.branchname == 'testes' ? 'novosgp-testes' : env.branchname == 'release' ? 'novosgp-hom' : env.branchname == 'release-r2' ? 'novosgp-hom2' : 'sme-novosgp' }"
    }

    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'development'; branch "story/*"; branch 'testes'; branch 'release'; branch 'release-r2'; } }
            steps {
                script {
                    failedStage = env.STAGE_NAME
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-sgp-webclient"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }

        stage('Deploy'){
            when { anyOf {  branch 'master'; branch 'main'; branch 'development'; branch 'testes'; branch 'release'; branch 'release-r2'; } }
            steps {
                script {
                    failedStage = env.STAGE_NAME
                    if ( env.branchname == 'main' ||  env.branchname == 'master' ||  env.branchname == 'pre-prod' ) {
		                withCredentials([string(credentialsId: 'aprovadores-sgp', variable: 'aprovadores')]) {
		                    timeout(time: 24, unit: "HOURS") {
			                    input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"  
	                        }   
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/sme-webclient -n ${namespace}
                        '''
                    }
                }
            }
        }
    }

    post {
        success { sendTelegram("<b>SUCESSO! ✅</b>") }
        unstable { sendTelegram("<b>INSTÁVEL! ⚠️</b>") }
        failure { sendTelegram("<b>FALHA! ❌</b>\n<b>Stage com falha:</b> ${failedStage}") }
        aborted { sendTelegram("<b>CANCELADO! ✖️</b>\n") }
    }
}
def failedStage = ""

def sendTelegram(message) {
    def commitHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
    def repoUrl = sh(script: "git config --get remote.origin.url", returnStdout: true).trim()
    def author = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()

    repoUrl = repoUrl
        .replace("git@github.com:", "https://github.com/")
        .replace(".git", "")

    def commitUrl = "${repoUrl}/commit/${commitHash}"

    def messageTemplate = (
        "<b>Job Name:</b> <a href='${JOB_URL}'>${JOB_NAME}</a>\n\n" +
        "<b>Status:</b> ${message}\n" +
        "<b>Build Number:</b> ${BUILD_DISPLAY_NAME}\n" +
        "<b>Commit:</b> <a href='${commitUrl}'>${commitHash}</a>\n" +
        "<b>Commit Author:</b> ${author}\n" +
        "<b>Log:</b> <a href='${env.BUILD_URL}console'>Ver console output</a>"
    )
    
    def encodedMessage = URLEncoder.encode(messageTemplate, "UTF-8")

    withCredentials([string(credentialsId: 'telegramTokenGeral', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatIdSgp', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
            contentType: 'APPLICATION_JSON',
            httpMode: 'GET',
            url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&parse_mode='+"HTML"+'&disable_web_page_preview=true',
            validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("pre-prod".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("release-r2".equals(branchName)) { return "config_release"; }
    else if ("testes".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }
}
