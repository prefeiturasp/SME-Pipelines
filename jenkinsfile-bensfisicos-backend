pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'homolog' ? 'bensfisicos-hom' : 'sme-bensfisicos' }"
        deployment = "${env.branchname == 'homolog' ? 'bensfisicos-back' : 'bensfisicos-backend' }"
        SONAR_PROJECT = 'SME-BensFisicos-BackEnd'   
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        sh"""
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT} \
                                -Dsonar.branch.name=${branchname} \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.exclusions=**/testes/**,cypress.config.js \
                                -Dsonar.coverage.exclusions=Dockerfile,**/testes/**,cypress.config.js \
                                -Dsonar.docker.file.patterns=Dockerfile \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }      

        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; branch 'homolog';  } }
            steps {
                checkout scm
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/bensfisicos-back"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }
        
        stage('Migrations') {
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; branch 'homolog';  } }
            steps {
                script {
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        echo 'Executando migrações'
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/${deployment} -n ${namespace}
                            kubectl exec -it deployment/${deployment} -n ${namespace} -- python manage.py migrate
                            kubectl exec -it deployment/${deployment} -n ${namespace} -- python manage.py setup_grupos_e_permissoes
                        '''
                    }
                }
            }
        }

        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'main'; branch 'release'; branch 'homolog';  } }
            steps {
                script{                        
                    if ( env.branchname == 'main' ||  env.branchname == 'master') {
                        withCredentials([string(credentialsId: 'aprovadores-bensfisicos', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/${deployment} -n ${namespace}

                        '''                      
                    }                    
                }
            }
        }
    }
}

def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("release".equals(branchName)) { return "config_release"; }
    else if ("development".equals(branchName)) { return "config_release"; }
    else if ("develop".equals(branchName)) { return "config_release"; }
}
