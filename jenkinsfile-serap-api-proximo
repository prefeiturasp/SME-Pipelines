pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'test' ? 'serap-estud-testes' : env.branchname == 'homolog' ? 'serap-estud-hom' : env.branchname == 'master' ? 'serap-estudante' : 'serap-estudante' }"
        deployment = "sme-serap-api-proximo"
    }
    
    agent { kubernetes { 
            label 'builder'
            defaultContainer 'builder'
        }
    }
    
    options {
      buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
      disableConcurrentBuilds()
      skipDefaultCheckout()
    }

    stages {
        stage('CheckOut') {            
            steps { checkout scm }       
        }
        
        stage('SonarQube') {
            agent { kubernetes { 
                    label 'builder'
                    defaultContainer 'builder'
                }
            } 
            steps {
                withSonarQubeEnv('sonarqube-local'){
                    sh'''
                        pip install coverage pytest
                        coverage run -m pytest
                        coverage xml
                        
                        sonar-scanner \
                            -Dsonar.projectKey=SME-Proximo-API \
                            -Dsonar.branch.name=${branchname} \
                            -Dsonar.python.coverage.reportPaths=coverage.xml \
                            -Dsonar.sources=.
                    '''
                }
            }
        }

        stage('Sonar Quality gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build') {
          when { anyOf { branch 'master'; branch 'homolog';  } }
            steps { 
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/${env.deployment}"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }

        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'homolog'; branch 'test';  } }
            agent { kubernetes { 
                    label 'builder'
                    defaultContainer 'builder'
                }
            }        
            steps {
                script{
                    if ( env.branchname == 'master' || env.branchname == 'homolog' ) {
                        timeout(time: 24, unit: "HOURS") {
                            input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: 'ollyver_ottoboni'
                        }
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('rm -f '+"$home"+'/.kube/config')
                        }
                    }
                    else{
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('rm -f '+"$home"+'/.kube/config')
                        }
                    }
                }
            }           
        }
    }
}

def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("test".equals(branchName)) { return "config_release"; }
}