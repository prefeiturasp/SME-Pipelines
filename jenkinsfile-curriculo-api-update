pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'develop' ? 'curriculo-dev' : env.branchname == 'staging' ? 'curriculo-hom' : env.branchname == 'staging-r2' ? 'curriculo-hom2' : 'sme-curriculo' }"
        SONAR_PROJECT = 'SME-plataforma-curriculo-API'
    }
	
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }
    
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        timestamps ()
    }

    stages {
        stage('Testes') {
            when { anyOf { branch 'master'; branch 'main'; branch 'develop'; branch 'homolog'; branch 'staging'; } }
            agent { kubernetes { 
                    label 'ruby-rc'
                    defaultContainer 'ruby-rc'
                }
            }
            steps {
                checkout scm
                sh 'gem install bundler -v 2.4.22'
                sh 'bundle install'
                sh 'bundle exec rake db:drop RAILS_ENV=test'
                sh 'bundle exec rake db:create RAILS_ENV=test'
                sh 'bundle exec rake db:migrate RAILS_ENV=test'
                sh 'bundle exec rspec spec'
            }
        }

        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        sh"""
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT} \
                                -Dsonar.branch.name=${branchname} \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.exclusions=**/testes/**,cypress.config.js \
                                -Dsonar.coverage.exclusions=Dockerfile,**/testes/**,cypress.config.js \
                                -Dsonar.docker.file.patterns=Dockerfile \
                                -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }
        
        stage('Build') {
            when { anyOf { branch 'master'; branch 'main'; branch 'develop'; branch 'homolog'; branch 'staging'; } }
            steps {
                script {
                    imagename = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/curriculo-api"        
                    dockerImage = docker.build(imagename, "-f Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage.push()
                    }
                    sh "docker rmi $imagename"
                }
            }
        }
	    
        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'main'; branch 'develop'; branch 'homolog'; branch 'staging'; } } 
            steps {
                script{
                    if ( env.branchname == 'main' ||  env.branchname == 'master' ) {
                        // sendTelegram("ðŸ¤© [Deploy ${env.branchname}] Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nMe aprove! \nLog: \n${env.BUILD_URL}")
                        withCredentials([string(credentialsId: 'aprovadores_curriculo', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                      sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/curriculo-api -n ${namespace}
                        '''
                    }
                }
            }           
        }
    }

    // post {
    //     success { sendTelegram("ðŸš€ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}console") }
    //     unstable { sendTelegram("ðŸ’£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}console") }
    //     failure { sendTelegram("ðŸ’¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}console") }
    //     aborted { sendTelegram ("ðŸ˜¥ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console") }
    // }
}
def sendTelegram(message) {
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
                validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("staging".equals(branchName)) { return "config_release"; }
    else if ("develop".equals(branchName)) { return "config_release"; }
}
