pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
    }
    agent { kubernetes { 
            label 'builder'
            defaultContainer 'builder'
        }
    }

    parameters {
        choice(name: 'DEPLOYMENT', choices: ['sme-serap-api-proximo', 'proximo'], description: 'Escolha para qual deployment deseja chavear!')
    }

    stages {
        stage('Chavea ingress'){
            when { anyOf { branch 'homolog'; } }
            agent { kubernetes { 
              label 'builder'
              defaultContainer 'builder'
            }
          }        
            steps {
                script{
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh('cp $config '+"$home"+'/.kube/config')
                        sh '''
                            echo "############# Escalando deployment #############"
                            case "$env.DEPLOYMENT" in
                                sme-serap-api-proximo)
                                    kubectl scale deployment proximo --replicas=0 -n serap-estud-hom
                                    kubectl scale deployment sme-serap-api-proximo --replicas=2 -n serap-estud-hom
                                    ;;
                                proximo)
                                    kubectl scale deployment proximo --replicas=2 -n serap-estud-hom
                                    kubectl scale deployment sme-serap-api-proximo --replicas=0 -n serap-estud-hom
                                    ;;
                            esac

                            echo "############# Chaveando ingress para ${env.DEPLOYMENT} #############"
                            kubectl patch ingress/serap-r -n serap-estud-hom --type=json \
                                -p='[
                                    {
                                        "op": "replace",
                                        "path": "/spec/rules/0/http/paths/1/backend/service/name",
                                        "value": "${env.DEPLOYMENT}"
                                    },
                                    {
                                        "op": "replace",
                                        "path": "/spec/rules/0/http/paths/1/backend/service/port/number",
                                        "value": 8000
                                    }
                                ]'

                            kubectl patch ingress/serap-r -n serap-estud-hom --type=json \
                                -p='[
                                    {
                                        "op": "replace",
                                        "path": "/spec/rules/0/http/paths/2/backend/service/name",
                                        "value": "${env.DEPLOYMENT}"
                                    },
                                    {
                                        "op": "replace",
                                        "path": "/spec/rules/0/http/paths/2/backend/service/port/number",
                                        "value": 8000
                                    }
                                ]'
                        '''
                        sh('rm -f '+"$home"+'/.kube/config')
                    }
                }
            }           
        }
    }
}
def getKubeconf(branchName) {
    if("homolog".equals(branchName)) { return "config_release"; }
}