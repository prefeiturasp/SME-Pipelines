pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        namespace = "${env.branchname == 'test' ? 'autosservico-testes' : env.branchname == 'homolog' ? 'autosservico-hom' : env.branchname == 'master' ? 'autosservico' : 'autosservico' }"
        deployment = "sme-autosservico-frontend"
        SONAR_PROJECT = 'SME-Autosservico-Frontend'
    }
    
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }
    
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        timestamps ()
    }

    stages {
        stage('Sonar & Tests') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: 'node-22') {
                            sh '''
                                corepack enable yarn
                                yarn -v
                                yarn
                                yarn test:coverage
                            '''
                            sh"""
                                ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SONAR_PROJECT} \
                                    -Dsonar.branch.name=${branchname} \
                                    -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                    -Dsonar.typescript.tsconfigPath=tsconfig.json \
                                    -Dsonar.coverage.exclusions=Dockerfile*,**/testes/**,cypress.config.js,src/styles/**,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                    -Dsonar.exclusions=**/testes/**,cypress.config.js,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                    -Dsonar.docker.file.patterns=Dockerfile.production \
                                    -Dsonar.sources=.
                            """
                        }
                    }
                }
            }
        }
        
        stage("Sonar Quality gate") {
            steps {
                script {
                    timeout(15) {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build') {
          when { anyOf { branch 'master'; branch 'homolog'; branch 'test'; } }
            steps { 
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/${env.deployment}"
                    dockerImage1 = docker.build(imagename1, "-f Dockerfile.production .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }

        stage('Deploy'){
            when { anyOf { branch 'master'; branch 'homolog'; branch 'test';  } }
            steps {
                script{
                    if ( env.branchname == 'master' || env.branchname == 'homolog' ) {
                        timeout(time: 24, unit: "HOURS") {
                            input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: 'ollyver_ottoboni'
                        }
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('rm -f '+"$home"+'/.kube/config')
                        }
                    }
                    else{
                        withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                            sh('cp $config '+"$home"+'/.kube/config')
                            sh 'kubectl rollout restart deployment/${deployment} -n ${namespace}'
                            sh('rm -f '+"$home"+'/.kube/config')
                        }
                    }
                }
            }           
        }
    }
}

def getKubeconf(branchName) {
    if("master".equals(branchName)) { return "config_prod"; }
    else if ("homolog".equals(branchName)) { return "config_release"; }
    else if ("test".equals(branchName)) { return "config_release"; }
}