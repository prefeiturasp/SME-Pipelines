pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        kubeconfig = getKubeconf(env.branchname)
        registryCredential = 'jenkins_registry'
        deployment = "sme-sr-workers"
        namespace = "${env.branchname == 'release' ? 'relatorios-hom' : 'sme-relatorios' }"
        SONAR_PROJECT = 'SME-SERVIDOR-RELATORIOS'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        timestamps ()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Tests') {
            parallel {
                stage('Test: SME.SR.Testes.QueryHandlers') {
                    agent { kubernetes { label 'builder-debian'; defaultContainer 'builder-debian' } }
                    when { anyOf { branch 'master'; branch 'main'; branch 'release'; branch 'development'; } } 
                    steps {
                        script {
                            withDotNet(sdk: 'dotnet-3-1') {
                                retry(2) {
                                    dotnetTest(
                                        project: 'testes/SME.SR.Testes.QueryHandlers',
                                        noBuild: false,
                                        continueOnError: false
                                    )
                                }
                            }
                        }
                    }
                }
                stage('Test: SME.SR.Aplicacao.Teste') {
                    agent { kubernetes { label 'builder-debian'; defaultContainer 'builder-debian' } }
                    when { anyOf { branch 'master'; branch 'main'; branch 'release'; branch 'development'; } } 
                    steps {
                        script {
                            withDotNet(sdk: 'dotnet-8') {
                                retry(2) {
                                    dotnetTest(
                                        project: 'testes/SME.SR.Aplicacao.Teste',
                                        properties: [
                                                CollectCoverage: 'true',
                                                CoverletOutputFormat: 'opencover'
                                        ],
                                        collect: 'XPlat Code Coverage',
                                        noBuild: false,
                                        continueOnError: false
                                    )
                                }
                            }
                            stash includes: "testes/SME.SR.Aplicacao.Teste/**/coverage.*.xml", name: "coverage-Aplicacao.Teste", allowEmpty: true
                        }
                    }
                }
            }
        }

        stage('SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'sonar-dotnet-3';
                    withDotNet(sdk: 'dotnet-3-1') {
                        withSonarQubeEnv('sonarqube-sme'){                           
                            try {
                                unstash "coverage-Aplicacao.Teste"
                            } catch (e) {
                                echo "Nenhum coverage encontrado!"
                            }
                            
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"${SONAR_PROJECT}" \
                                    /d:sonar.cs.opencover.reportsPaths="**/coverage.*.xml" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.coverage.exclusions="**/teste/**,**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.exclusions="teste/**,**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            
                            dotnetBuild project: 'src/SME.SR.Workers.SGP/SME.SR.Workers.SGP.csproj'
                            
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     steps {
        //         script {
        //             timeout(15) {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            when { anyOf {  branch 'master'; branch 'main' ; branch 'release'; } }
            steps {
                script {
                    imagename1 = "registry.sme.prefeitura.sp.gov.br/${env.branchname}/sme-sr-worker"   
                    dockerImage1 = docker.build(imagename1, "-f src/SME.SR.Workers.SGP/Dockerfile .")
                    docker.withRegistry( 'https://registry.sme.prefeitura.sp.gov.br', registryCredential ) {
                        dockerImage1.push()
                    }
                    sh "docker rmi $imagename1"
                }
            }
        }
	    
        stage('Deploy'){
	        when { anyOf {  branch 'master'; branch 'main' ; branch 'release'; } }
            steps {
                script{
                    if ( env.branchname == 'main' ||  env.branchname == 'master' ||  env.branchname == 'pre-prod' ) {
                         withCredentials([string(credentialsId: 'aprovadores-sgp', variable: 'aprovadores')]) {
                            timeout(time: 24, unit: "HOURS") {
                                input message: 'Deseja realizar o deploy?', ok: 'SIM', submitter: "${aprovadores}"
                            }
                        }
                    }
					
                    withCredentials([file(credentialsId: "${kubeconfig}", variable: 'config')]){
                        sh '''
                            [ -f "$HOME/.kube/config" ] && rm -f "$HOME/.kube/config"
                            mkdir -p "$HOME/.kube"
                            cp "$config" "$HOME/.kube/config"
                            export KUBECONFIG="$HOME/.kube/config"

                            kubectl rollout restart deployment/${deployment} -n ${namespace}
                        '''
                    }
                }
            }           
        }    
    }
}
def sendTelegram(message) {
    def encodedMessage = URLEncoder.encode(message, "UTF-8")
    withCredentials([string(credentialsId: 'telegramToken', variable: 'TOKEN'),
    string(credentialsId: 'telegramChatId', variable: 'CHAT_ID')]) {
        response = httpRequest (consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                url: 'https://api.telegram.org/bot'+"$TOKEN"+'/sendMessage?text='+encodedMessage+'&chat_id='+"$CHAT_ID"+'&disable_web_page_preview=true',
                validResponseCodes: '200')
        return response
    }
}
def getKubeconf(branchName) {
    if("main".equals(branchName)) { return "config_prod"; }
    else if ("master".equals(branchName)) { return "config_prod"; }
    else if ("release".equals(branchName)) { return "config_release"; }
}
