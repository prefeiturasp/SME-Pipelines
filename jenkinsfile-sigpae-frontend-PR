pipeline {
    environment {
        branchname =  env.BRANCH_NAME.toLowerCase()
        SONAR_PROJECT = 'SIGPAE-FRONTEND'
    }
  
    agent { kubernetes { 
            label 'builder-debian'
            defaultContainer 'builder-debian'
        }
    }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
        timestamps ()
    }
  
    stages {
        stage('Sonar & Tests') {
            when {
                allOf {
                    expression { return env.BRANCH_NAME.startsWith('PR-') }
                    anyOf {
                        expression { return env.CHANGE_TARGET == 'development' }
                        expression { return env.CHANGE_TARGET == 'homolog' }
                        expression { return env.CHANGE_TARGET == 'master' }
                    }
                }
            }
            steps {
                script {
                    def targetBranch = env.CHANGE_TARGET
                    def sourceBranch = env.CHANGE_BRANCH
                    def pullID = env.CHANGE_ID

                    echo "ORIGEM: ${sourceBranch}"
                    echo "DESTINO: ${targetBranch}"
                    echo "PULL ID: ${pullID}"

                    def scannerHome = tool 'sonarscanner-7.2.0';
                    withSonarQubeEnv('sonarqube-sme'){
                        nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: 'node-22-15-1') {
                            sh 'npm install'
                            // sh 'npm install -g jshint'
                            // sh 'npm run-script eslint'
                            // sh 'npm run-script prettier'
                            // sh 'jshint --verbose --reporter=checkstyle src > checkstyle-jshint.xml'

                            // sh '''
                            //     npm run coverage
                            // '''

                            sh"""
                                ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SONAR_PROJECT} \
                                    -Dsonar.pullrequest.branch=${sourceBranch} \
                                    -Dsonar.pullrequest.base=${targetBranch} \
                                    -Dsonar.pullrequest.key=${pullID} \
                                    -Dsonar.sourceEncoding=UTF-8 \
                                    -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                                    -Dsonar.typescript.tsconfigPath=tsconfig.json \
                                    -Dsonar.coverage.exclusions=Dockerfile,**/__tests__/**,**/testes/**,cypress.config.js,src/styles/**,**/.next/**,**/*.test.tsx,**/*.test.ts,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,**/mocks/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                    -Dsonar.exclusions=**/__tests__/**,**/testes/**,cypress.config.js,**/.next/**,**/*.test.tsx,**/*.test.ts,**/*.test.jsx,**/setupTests.ts,src/components/ui/**,src/const.ts,src/app/api/*,src/lib/auth/__tests__/*,*/types/*,**/_material/**,**/mocks/**,next.config.mjs,tailwind.config.js,postcss.config.mjs,src/lib/zod-i18n.ts,next-env.d.ts,vitest.config.ts,eslint.config.mjs,eslint.config.mjs \
                                    -Dsonar.docker.file.patterns=Dockerfile \
                                    -Dsonar.sources=.
                            """
                        }
                    }
                }
            }
        }

        stage("Sonar Quality gate") {
            when {
                allOf {
                    expression { return env.BRANCH_NAME.startsWith('PR-') }
                    anyOf {
                        expression { return env.CHANGE_TARGET == 'development' }
                        expression { return env.CHANGE_TARGET == 'homolog' }
                        expression { return env.CHANGE_TARGET == 'master' }
                    }
                }
            }
            steps {
                script {
                    timeout(15) {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        // stage("Sonar Quality gate") {
        //     when {
        //         allOf {
        //             expression { return env.BRANCH_NAME.startsWith('PR-') }
        //             anyOf {
        //                 expression { return env.CHANGE_TARGET == 'development' }
        //                 expression { return env.CHANGE_TARGET == 'homolog' }
        //                 expression { return env.CHANGE_TARGET == 'master' }
        //             }
        //         }
        //     }
        //     steps {
        //         script {
        //             withCredentials([string(credentialsId: 'github-token-test', variable: 'GITHUB_TOKEN')]) {
        //                 timeout(15) {
        //                     def qg = waitForQualityGate()
        //                     def repo = env.CHANGE_URL.split('/')[3..4].join('/')
        //                     def pullID = env.CHANGE_ID
        //                     def comment = ""
        //                     def dayTime = sh(script: "date +%d-%m-%Y-%H-%M-%S", returnStdout: true).trim()

        //                     if (qg.status != 'OK') {
        //                         comment = "**SonarQube** - Quality Gate **falhou**: ${qg.status} ❌ - Em: ${dayTime}"
        //                         sh "curl -s -H 'Authorization: token ${GITHUB_TOKEN}' -X POST -d '{\"body\":\"${comment}\"}' https://api.github.com/repos/${repo}/issues/${pullID}/comments"
        //                         error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                     } else {
        //                         comment = "**SonarQube** - Quality Gate **aprovado** ✅ - Em: ${dayTime}"
        //                         sh "curl -s -H 'Authorization: token ${GITHUB_TOKEN}' -X POST -d '{\"body\":\"${comment}\"}' https://api.github.com/repos/${repo}/issues/${pullID}/comments"
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}