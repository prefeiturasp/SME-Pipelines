pipeline {
    agent any

    environment {
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = 'true'
        DOTNET_CLI_TELEMETRY_OPTOUT = 'false'
        DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER = 'false'
        branchname = 'release'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    def scannerHome = tool 'sonar-dotnet-5';
                    withDotNet(sdk: 'dotnet-5') {
                        withSonarQubeEnv('sonar-lab'){
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"SME-NovoSGP-TESTE" \
                                    /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml" \
                                    /d:sonar.coverage.exclusions="**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.exclusions="**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            dotnetBuild project: 'SME.SGP.sln', sdk: 'dotnet-5'
                            dotnetTest continueOnError: true, noBuild: true, listTests: true, sdk: 'dotnet-5'
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}