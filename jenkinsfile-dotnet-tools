pipeline {
    agent any

    environment {
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = 'true'
        DOTNET_CLI_TELEMETRY_OPTOUT = 'false'
        DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER = 'false'
        branchname = 'novosgp'
        SONAR_PROJECT = 'SONAR_TESTES'
    }

    stages {
        stage('Sonar & Tests') {
            steps {
                script {
                    def scannerHome = tool 'sonar-dotnet-5';
                    withDotNet(sdk: 'dotnet-5') {
                        withSonarQubeEnv('sonar-lab'){
                            sh"""
                                dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin \
                                    /k:"${SONAR_PROJECT}" \
                                    /d:sonar.cs.opencover.reportsPaths="**/*coverage.opencover.xml" \
                                    /d:sonar.coverage.exclusions="**/*Dto.cs,**/*ViewModel.cs" \
                                    /d:sonar.branch.name=${branchname} \
                                    /d:sonar.exclusions="**/Migrations/**,**/Configurations/**,**/*Dto.cs,**/*ViewModel.cs,**/Startup.cs,**/Program.cs"
                            """
                            
                            dotnetBuild project: 'SME.SGP.sln'
                            
                            def testsDir = [
                                // 'teste/SME.SGP.TesteIntegracao',
                                // 'teste/SME.SGP.TesteIntegracao.AEE',
                                // 'teste/SME.SGP.TesteIntegracao.Aula',
                                // 'teste/SME.SGP.TesteIntegracao.Fechamento',
                                // 'teste/SME.SGP.TesteIntegracao.Frequencia',
                                // 'teste/SME.SGP.TesteIntegracao.Pendencia',
                                // 'teste/SME.SGP.Aplicacao.Teste',
                                'SME.SGP.Api.Teste'
                            ]

                            def tasks = [:]

                            for (t in testsDir) {
                                def testName = t
                                tasks[testName] = {
                                    stage("Test: ${testName}") {
                                        dotnetTest(
                                            project: "${testName}",
                                            properties: [
                                                CollectCoverage: 'true',
                                                CoverletOutputFormat: 'opencover'
                                            ],
                                            collect: 'XPlat Code Coverage',
                                            noBuild: true,
                                            continueOnError: false
                                        )
                                    }
                                }
                            }

                            parallel tasks
                            
                            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                    }
                }
            }
        }

        stage("Sonar Quality gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}